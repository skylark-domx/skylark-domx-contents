{"version":3,"sources":["Clipboard.js"],"names":["define","langx","$","contents","Clipboard","Evented","inherit","pluginName","prototype","opts","pasteImage","cleanPaste","init","editable","_this","this","extend","body","on","e","range","pasting","_pasteBin","trigger","selection","deleteRangeContents","html","collapsed","collapse","formatter","format","setRangeAtStartOf","find","_processPasteByClipboardApi","inputManager","throttledValueChanged","clear","throttledSelectionChanged","undoManager","throttledPushState","reset","resetCaretPosition","_getPasteContent","pasteContent","_processPasteContent","_pasteInBlockEl","_pastePlainText","imageFile","pasteItem","ref","uploadOpt","util","browser","edge","originalEvent","clipboardData","items","length","test","type","getAsFile","name","triggerHandler","uploader","upload","callback","state","addClass","classPrefix","attr","appendTo","$el","caret","caretPosition","focus","setTimeout","get","innerHTML","blockNodes","last","is","clearHtml","append","remove","_cleanPasteFontSize","decorate","beautify","children","$blockEl","$img","blob","dataURLtoBlob","img","insertPosition","k","l","lastLine","len","len1","len2","len3","len4","line","lines","m","node","o","q","ref1","ref2","split","pop","insertNode","document","createTextNode","text","css","RegExp","location","origin","Image","onload","canvas","createElement","width","naturalWidth","height","naturalHeight","getContext","drawImage","toDataURL","src","isEmptyNode","replaceWith","setRangeAtEndOf","parent","after","rangeAtStartOf","rangeAtEndOf","breakBlockEl","$node","sizeMap","map","i","el","inArray"],"mappings":";;;;;;;AAAAA,QACE,sBACA,qBACA,cACA,SAASC,EAAMC,EAAEC,GAEjB,IAAIC,EAAYH,EAAMI,QAAQC,YAwQ9B,OAnQAF,EAAUG,WAAa,YAEvBH,EAAUI,UAAUC,MAClBC,YAAY,EACZC,YAAY,GAGdP,EAAUI,UAAUI,KAAO,SAASC,EAASJ,GAMZ,IAAUK,EALzCC,KAAKF,SAAWA,EAChBE,KAAKN,KAAOR,EAAMe,UAAWD,KAAKN,KAAMA,GACpCM,KAAKN,KAAKC,YAA8C,iBAAzBK,KAAKN,KAAKC,aAC3CK,KAAKN,KAAKC,WAAa,UAEzBK,KAAKF,SAASI,KAAKC,GAAG,SAAmBJ,EAkCtCC,KAjCM,SAASI,GACd,IAAIC,EACJ,IAAIN,EAAMO,UAAWP,EAAMQ,UAG3B,OAAkC,IAA9BR,EAAMD,SAASU,QAAQJ,KAG3BC,EAAQN,EAAMD,SAASW,UAAUC,sBAC7BX,EAAMD,SAASI,KAAKS,OACjBN,EAAMO,WACTP,EAAMQ,UAAS,IAGjBd,EAAMD,SAASgB,UAAUC,SACzBhB,EAAMD,SAASW,UAAUO,kBAAkBjB,EAAMD,SAASI,KAAKe,KAAK,cAElElB,EAAMmB,4BAA4Bd,KAGtCL,EAAMD,SAASqB,aAAaC,sBAAsBC,QAClDtB,EAAMD,SAASqB,aAAaG,0BAA0BD,QACtDtB,EAAMD,SAASyB,YAAYC,mBAAmBH,QAC9CtB,EAAMD,SAASW,UAAUgB,QACzB1B,EAAMD,SAASyB,YAAYG,qBAC3B3B,EAAMO,SAAU,EACTP,EAAM4B,iBAAiB,SAASC,GAIrC,OAHA7B,EAAM8B,qBAAqBD,GAC3B7B,EAAM+B,gBAAkB,KACxB/B,EAAMgC,gBAAkB,KACjBhC,EAAMO,SAAU,UAM/BjB,EAAUI,UAAUyB,4BAA8B,SAASd,GACzD,IAAI4B,EAAWC,EAAWC,EAAKC,EAC/B,IAAInC,KAAKF,SAASsC,KAAKC,QAAQC,MAG3BlC,EAAEmC,cAAcC,eAAiBpC,EAAEmC,cAAcC,cAAcC,OAASrC,EAAEmC,cAAcC,cAAcC,MAAMC,OAAS,IACvHT,EAAY7B,EAAEmC,cAAcC,cAAcC,MAAM,GAC5C,WAAWE,KAAKV,EAAUW,OAAO,CAEnC,GAAoB,OADpBZ,EAAYC,EAAUY,eACO7C,KAAKN,KAAKC,WACrC,OAKF,GAHKqC,EAAUc,OACbd,EAAUc,KAAO,wBAE0C,IAAzD9C,KAAKF,SAASiD,eAAe,WAAYf,IAC3C,OAOF,OALAG,MACUnC,KAAKN,KAAKC,aAAc,EACI,OAAjCuC,EAAMlC,KAAKF,SAASkD,WACvBd,EAAIe,OAAOjB,EAAWG,IAEjB,IAKb9C,EAAUI,UAAUkC,iBAAmB,SAASuB,GAC9C,IAAIC,EAOwBpD,EAA5B,OANAC,KAAKO,UAAYpB,EAAE,kCAAkCiE,SAASpD,KAAKN,KAAK2D,YAAc,aAAaC,KAAK,WAAY,MAAMC,SAASvD,KAAKF,SAAS0D,KACjJL,GACExC,KAAMX,KAAKF,SAASI,KAAKS,OACzB8C,MAAOzD,KAAKF,SAASyB,YAAYmC,iBAEnC1D,KAAKO,UAAUoD,QACRC,YAAqB7D,EA2BzBC,KA1BM,WACL,IAAI4B,EAuBJ,OArBA7B,EAAMD,SAASI,KAAK2D,IAAI,GAAGC,UAAYX,EAAMxC,KAC7CZ,EAAMD,SAASyB,YAAYmC,cAAcP,EAAMM,OAC/C1D,EAAMD,SAASI,KAAKyD,QACpB5D,EAAMD,SAASW,UAAUgB,QACzB1B,EAAMD,SAASW,UAAUJ,QACzBN,EAAM+B,gBAAkB/B,EAAMD,SAASW,UAAUsD,aAAaC,OAC9DjE,EAAMgC,gBAAkBhC,EAAML,KAAKE,YAAcG,EAAM+B,gBAAgBmC,GAAG,cACtElE,EAAMgC,gBACRH,EAAe7B,EAAMD,SAASgB,UAAUoD,UAAUnE,EAAMQ,UAAUI,QAAQ,KAE1EiB,EAAezC,EAAE,UAAUgF,OAAOpE,EAAMQ,UAAUnB,aACrC6B,KAAK,SAASmD,SAC3BxC,EAAaX,KAAK,kBAAkBmD,SACpCrE,EAAMsE,oBAAoBzC,GAC1B7B,EAAMD,SAASgB,UAAUC,OAAOa,GAChC7B,EAAMD,SAASgB,UAAUwD,SAAS1C,GAClC7B,EAAMD,SAASgB,UAAUyD,SAAS3C,EAAa4C,YAC/C5C,EAAeA,EAAaxC,YAE9BW,EAAMQ,UAAU6D,SAChBrE,EAAMQ,UAAY,KACX2C,EAAStB,KAEV,IAGZvC,EAAUI,UAAUoC,qBAAuB,SAASD,GAClD,IAAI6C,EAAUC,EAAMC,EAAMH,EAAUI,EAAeC,EAAKC,EAAgBC,EAAGC,EAAGC,EAAUC,EAAKC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EAAOC,EAAGC,EAAMC,EAAGC,EAAG1D,EAAK2D,EAAMC,EAAM3D,EAAWa,EAC7K,IAAgE,IAA5DhD,KAAKF,SAASiD,eAAe,WAAYnB,MAG7C6C,EAAWzE,KAAK8B,gBACXF,GAAL,CAGA,GAAI5B,KAAK+B,gBACP,GAAI0C,EAASR,GAAG,SAAU,CAGxB,IADAgB,GADAO,EAAQ5D,EAAamE,MAAM,OACVC,MACZjB,EAAI,EAAGG,EAAMM,EAAM9C,OAAQqC,EAAIG,EAAKH,IACvCQ,EAAOC,EAAMT,GACb/E,KAAKF,SAASW,UAAUwF,WAAWC,SAASC,eAAeZ,IAC3DvF,KAAKF,SAASW,UAAUwF,WAAW9G,EAAE,UAEvCa,KAAKF,SAASW,UAAUwF,WAAWC,SAASC,eAAelB,SAI3D,IAAKD,EAAI,EAAGG,GADZjD,GADAN,EAAezC,EAAE,UAAUiH,KAAKxE,IACbxC,YACIsD,OAAQsC,EAAIG,EAAMH,IACvCU,EAAOxD,EAAI8C,GACXhF,KAAKF,SAASW,UAAUwF,WAAW9G,EAAEuG,GAAM,SAG1C,GAAIjB,EAASR,GAAGjE,KAAKF,SAASI,MACnC,IAAKuF,EAAI,EAAGL,EAAOxD,EAAac,OAAQ+C,EAAIL,EAAMK,IAChDC,EAAO9D,EAAa6D,GACpBzF,KAAKF,SAASW,UAAUwF,WAAWP,OAEhC,CAAA,GAAI9D,EAAac,OAAS,EAC/B,OACK,GAA4B,IAAxBd,EAAac,OACtB,GAAId,EAAaqC,GAAG,KAAM,CAOxB,GANAO,EAAW5C,EAAaxC,WACpBqF,EAASR,GAAG,uBACVO,EAAS9B,QACX8B,EAAS6B,IAAI,YAAa,IAGN,IAApB7B,EAAS9B,QAAgB8B,EAASP,GAAG,OAAQ,CAE/C,GAAI,cAActB,MADlB+B,EAAOF,GACqBlB,KAAK,QAAS,CACxC,IAAKtD,KAAKN,KAAKC,WACb,OASF,OAPAgF,EAAO3E,KAAKF,SAASsC,KAAKwC,cAAcF,EAAKpB,KAAK,SAC7CR,KAAO,uBACZX,MACUnC,KAAKN,KAAKC,aAAc,OACK,OAAlCkG,EAAO7F,KAAKF,SAASkD,WACxB6C,EAAK5C,OAAO0B,EAAMxC,IAGf,GAAI,IAAImE,OAAO,SAAWC,SAASC,OAAS,KAAK7D,KAAK+B,EAAKpB,KAAK,QAAS,CAC9E,IAAKtD,KAAKN,KAAKC,WACb,OAoBF,OAlBAwC,MACUnC,KAAKN,KAAKC,aAAc,EAClCiF,EAAgB5E,KAAKF,SAASsC,KAAKwC,cACnC5B,EAAWhD,KAAKF,SAASkD,UACzB6B,EAAM,IAAI4B,OACNC,OAAS,WACX,IAAIC,GACJA,EAAST,SAASU,cAAc,WACzBC,MAAQhC,EAAIiC,aACnBH,EAAOI,OAASlC,EAAImC,cACpBL,EAAOM,WAAW,MAAMC,UAAUrC,EAAK,EAAG,IAC1CF,EAAOC,EAAc+B,EAAOQ,UAAU,eACjCrE,KAAO,sBACK,OAAbE,GACFA,EAASC,OAAO0B,EAAMxC,SAG1B0C,EAAIuC,IAAM1C,EAAKpB,KAAK,QAEf,GAAIoB,EAAKT,GAAG,kCACjB,OAGJ,IAAK0B,EAAI,EAAGN,EAAOb,EAAS9B,OAAQiD,EAAIN,EAAMM,IAC5CD,EAAOlB,EAASmB,GAChB3F,KAAKF,SAASW,UAAUwF,WAAWP,QAEhC,GAAIjB,EAASR,GAAG,MAAQjE,KAAKF,SAASsC,KAAKiF,YAAY5C,GAC5DA,EAAS6C,YAAY1F,GACrB5B,KAAKF,SAASW,UAAU8G,gBAAgB3F,QACnC,GAAIA,EAAaqC,GAAG,UACzB,GAAuC,IAAnCrC,EAAaX,KAAK,MAAMyB,OAG1B,IAAKkD,EAAI,EAAGN,GADZQ,GADAlE,EAAezC,EAAE,UAAUiH,KAAKxE,EAAawE,SACzBhH,YACIsD,OAAQkD,EAAIN,EAAMM,IACxCF,EAAOI,EAAKF,GACZ5F,KAAKF,SAASW,UAAUwF,WAAW9G,EAAEuG,GAAM,SAEpCjB,EAASR,GAAG,OACrBQ,EAAS+C,SAASC,MAAM7F,GACxB5B,KAAKF,SAASW,UAAU8G,gBAAgB3F,KAExC6C,EAASgD,MAAM7F,GACf5B,KAAKF,SAASW,UAAU8G,gBAAgB3F,SAG1C6C,EAASgD,MAAM7F,GACf5B,KAAKF,SAASW,UAAU8G,gBAAgB3F,QAGtC6C,EAASR,GAAG,QACdQ,EAAWA,EAAS+C,UAElBxH,KAAKF,SAASW,UAAUiH,eAAejD,GACzCK,EAAiB,SACR9E,KAAKF,SAASW,UAAUkH,aAAalD,GAC9CK,EAAiB,SAEjB9E,KAAKF,SAASW,UAAUmH,aAAanD,GACrCK,EAAiB,UAEnBL,EAASK,GAAgBlD,GACzB5B,KAAKF,SAASW,UAAU8G,gBAAgB3F,EAAaoC,QAEvD,OAAOhE,KAAKF,SAASqB,aAAaC,0BAGpC/B,EAAUI,UAAU4E,oBAAsB,SAASqB,GACjD,IAAImC,EAAOC,EAEX,IADAD,EAAQ1I,EAAEuG,IACEhD,OAAS,EAIrB,OADAoF,GAAW,QAAS,SAAU,SAAU,SACjCD,EAAM5G,KAAK,wBAAwB8G,IAAI,SAASC,EAAGC,GACxD,IAAIzE,EAEJ,GADAA,EAAMrE,EAAE8I,GACJ/I,EAAMgJ,QAAQ1E,EAAI6C,IAAI,aAAcyB,GAAW,EACjD,OAAOtE,EAAI6C,IAAI,YAAa,OAK3BjH,EAASC,UAAYA","file":"../Clipboard.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"./contents\"\r\n],function(langx,$,contents){ \r\n\r\n  var Clipboard = langx.Evented.inherit({\r\n\r\n  });\r\n\r\n\r\n  Clipboard.pluginName = 'Clipboard';\r\n\r\n  Clipboard.prototype.opts = {\r\n    pasteImage: false,\r\n    cleanPaste: false\r\n  };\r\n\r\n  Clipboard.prototype.init = function(editable,opts) {\r\n    this.editable = editable; //this._module;\r\n    this.opts = langx.extend({}, this.opts, opts);\r\n    if (this.opts.pasteImage && typeof this.opts.pasteImage !== 'string') {\r\n      this.opts.pasteImage = 'inline';\r\n    }\r\n    this.editable.body.on('paste', (function(_this) {\r\n      return function(e) {\r\n        var range;\r\n        if (_this.pasting || _this._pasteBin) {\r\n          return;\r\n        }\r\n        if (_this.editable.trigger(e) === false) {\r\n          return false;\r\n        }\r\n        range = _this.editable.selection.deleteRangeContents();\r\n        if (_this.editable.body.html()) {\r\n          if (!range.collapsed) {\r\n            range.collapse(true);\r\n          }\r\n        } else {\r\n          _this.editable.formatter.format();\r\n          _this.editable.selection.setRangeAtStartOf(_this.editable.body.find('p:first'));\r\n        }\r\n        if (_this._processPasteByClipboardApi(e)) {\r\n          return false;\r\n        }\r\n        _this.editable.inputManager.throttledValueChanged.clear();\r\n        _this.editable.inputManager.throttledSelectionChanged.clear();\r\n        _this.editable.undoManager.throttledPushState.clear();\r\n        _this.editable.selection.reset();\r\n        _this.editable.undoManager.resetCaretPosition();\r\n        _this.pasting = true;\r\n        return _this._getPasteContent(function(pasteContent) {\r\n          _this._processPasteContent(pasteContent);\r\n          _this._pasteInBlockEl = null;\r\n          _this._pastePlainText = null;\r\n          return _this.pasting = false;\r\n        });\r\n      };\r\n    })(this));\r\n  };\r\n\r\n  Clipboard.prototype._processPasteByClipboardApi = function(e) {\r\n    var imageFile, pasteItem, ref, uploadOpt;\r\n    if (this.editable.util.browser.edge) {\r\n      return;\r\n    }\r\n    if (e.originalEvent.clipboardData && e.originalEvent.clipboardData.items && e.originalEvent.clipboardData.items.length > 0) {\r\n      pasteItem = e.originalEvent.clipboardData.items[0];\r\n      if (/^image\\//.test(pasteItem.type)) {\r\n        imageFile = pasteItem.getAsFile();\r\n        if (!((imageFile != null) && this.opts.pasteImage)) {\r\n          return;\r\n        }\r\n        if (!imageFile.name) {\r\n          imageFile.name = \"Clipboard Image.png\";\r\n        }\r\n        if (this.editable.triggerHandler('pasting', [imageFile]) === false) {\r\n          return;\r\n        }\r\n        uploadOpt = {};\r\n        uploadOpt[this.opts.pasteImage] = true;\r\n        if ((ref = this.editable.uploader) != null) {\r\n          ref.upload(imageFile, uploadOpt);\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n\r\n  Clipboard.prototype._getPasteContent = function(callback) {\r\n    var state;\r\n    this._pasteBin = $('<div contenteditable=\"true\" />').addClass(this.opts.classPrefix + 'paste-bin').attr('tabIndex', '-1').appendTo(this.editable.$el);\r\n    state = {\r\n      html: this.editable.body.html(),\r\n      caret: this.editable.undoManager.caretPosition()\r\n    };\r\n    this._pasteBin.focus();\r\n    return setTimeout((function(_this) {\r\n      return function() {\r\n        var pasteContent;\r\n        //_this.editable.hidePopover();\r\n        _this.editable.body.get(0).innerHTML = state.html;\r\n        _this.editable.undoManager.caretPosition(state.caret);\r\n        _this.editable.body.focus();\r\n        _this.editable.selection.reset();\r\n        _this.editable.selection.range();\r\n        _this._pasteInBlockEl = _this.editable.selection.blockNodes().last();\r\n        _this._pastePlainText = _this.opts.cleanPaste || _this._pasteInBlockEl.is('pre, table');\r\n        if (_this._pastePlainText) {\r\n          pasteContent = _this.editable.formatter.clearHtml(_this._pasteBin.html(), true);\r\n        } else {\r\n          pasteContent = $('<div/>').append(_this._pasteBin.contents());\r\n          pasteContent.find('style').remove();\r\n          pasteContent.find('table colgroup').remove();\r\n          _this._cleanPasteFontSize(pasteContent);\r\n          _this.editable.formatter.format(pasteContent);\r\n          _this.editable.formatter.decorate(pasteContent);\r\n          _this.editable.formatter.beautify(pasteContent.children());\r\n          pasteContent = pasteContent.contents();\r\n        }\r\n        _this._pasteBin.remove();\r\n        _this._pasteBin = null;\r\n        return callback(pasteContent);\r\n      };\r\n    })(this), 0);\r\n  };\r\n\r\n  Clipboard.prototype._processPasteContent = function(pasteContent) {\r\n    var $blockEl, $img, blob, children, dataURLtoBlob, img, insertPosition, k, l, lastLine, len, len1, len2, len3, len4, line, lines, m, node, o, q, ref, ref1, ref2, uploadOpt, uploader;\r\n    if (this.editable.triggerHandler('pasting', [pasteContent]) === false) {\r\n      return;\r\n    }\r\n    $blockEl = this._pasteInBlockEl;\r\n    if (!pasteContent) {\r\n      return;\r\n    }\r\n    if (this._pastePlainText) {\r\n      if ($blockEl.is('table')) {\r\n        lines = pasteContent.split('\\n');\r\n        lastLine = lines.pop();\r\n        for (k = 0, len = lines.length; k < len; k++) {\r\n          line = lines[k];\r\n          this.editable.selection.insertNode(document.createTextNode(line));\r\n          this.editable.selection.insertNode($('<br/>'));\r\n        }\r\n        this.editable.selection.insertNode(document.createTextNode(lastLine));\r\n      } else {\r\n        pasteContent = $('<div/>').text(pasteContent);\r\n        ref = pasteContent.contents();\r\n        for (l = 0, len1 = ref.length; l < len1; l++) {\r\n          node = ref[l];\r\n          this.editable.selection.insertNode($(node)[0]);\r\n        }\r\n      }\r\n    } else if ($blockEl.is(this.editable.body)) {\r\n      for (m = 0, len2 = pasteContent.length; m < len2; m++) {\r\n        node = pasteContent[m];\r\n        this.editable.selection.insertNode(node);\r\n      }\r\n    } else if (pasteContent.length < 1) {\r\n      return;\r\n    } else if (pasteContent.length === 1) {\r\n      if (pasteContent.is('p')) {\r\n        children = pasteContent.contents();\r\n        if ($blockEl.is('h1, h2, h3, h4, h5')) {\r\n          if (children.length) {\r\n            children.css('font-size', '');\r\n          }\r\n        }\r\n        if (children.length === 1 && children.is('img')) {\r\n          $img = children;\r\n          if (/^data:image/.test($img.attr('src'))) {\r\n            if (!this.opts.pasteImage) {\r\n              return;\r\n            }\r\n            blob = this.editable.util.dataURLtoBlob($img.attr(\"src\"));\r\n            blob.name = \"Clipboard Image.png\";\r\n            uploadOpt = {};\r\n            uploadOpt[this.opts.pasteImage] = true;\r\n            if ((ref1 = this.editable.uploader) != null) {\r\n              ref1.upload(blob, uploadOpt);\r\n            }\r\n            return;\r\n          } else if (new RegExp('^blob:' + location.origin + '/').test($img.attr('src'))) {\r\n            if (!this.opts.pasteImage) {\r\n              return;\r\n            }\r\n            uploadOpt = {};\r\n            uploadOpt[this.opts.pasteImage] = true;\r\n            dataURLtoBlob = this.editable.util.dataURLtoBlob;\r\n            uploader = this.editable.uploader;\r\n            img = new Image;\r\n            img.onload = function() {\r\n              var canvas;\r\n              canvas = document.createElement('canvas');\r\n              canvas.width = img.naturalWidth;\r\n              canvas.height = img.naturalHeight;\r\n              canvas.getContext('2d').drawImage(img, 0, 0);\r\n              blob = dataURLtoBlob(canvas.toDataURL('image/png'));\r\n              blob.name = 'Clipboard Image.png';\r\n              if (uploader !== null) {\r\n                uploader.upload(blob, uploadOpt);\r\n              }\r\n            };\r\n            img.src = $img.attr('src');\r\n            return;\r\n          } else if ($img.is('img[src^=\"webkit-fake-url://\"]')) {\r\n            return;\r\n          }\r\n        }\r\n        for (o = 0, len3 = children.length; o < len3; o++) {\r\n          node = children[o];\r\n          this.editable.selection.insertNode(node);\r\n        }\r\n      } else if ($blockEl.is('p') && this.editable.util.isEmptyNode($blockEl)) {\r\n        $blockEl.replaceWith(pasteContent);\r\n        this.editable.selection.setRangeAtEndOf(pasteContent);\r\n      } else if (pasteContent.is('ul, ol')) {\r\n        if (pasteContent.find('li').length === 1) {\r\n          pasteContent = $('<div/>').text(pasteContent.text());\r\n          ref2 = pasteContent.contents();\r\n          for (q = 0, len4 = ref2.length; q < len4; q++) {\r\n            node = ref2[q];\r\n            this.editable.selection.insertNode($(node)[0]);\r\n          }\r\n        } else if ($blockEl.is('li')) {\r\n          $blockEl.parent().after(pasteContent);\r\n          this.editable.selection.setRangeAtEndOf(pasteContent);\r\n        } else {\r\n          $blockEl.after(pasteContent);\r\n          this.editable.selection.setRangeAtEndOf(pasteContent);\r\n        }\r\n      } else {\r\n        $blockEl.after(pasteContent);\r\n        this.editable.selection.setRangeAtEndOf(pasteContent);\r\n      }\r\n    } else {\r\n      if ($blockEl.is('li')) {\r\n        $blockEl = $blockEl.parent();\r\n      }\r\n      if (this.editable.selection.rangeAtStartOf($blockEl)) {\r\n        insertPosition = 'before';\r\n      } else if (this.editable.selection.rangeAtEndOf($blockEl)) {\r\n        insertPosition = 'after';\r\n      } else {\r\n        this.editable.selection.breakBlockEl($blockEl);\r\n        insertPosition = 'before';\r\n      }\r\n      $blockEl[insertPosition](pasteContent);\r\n      this.editable.selection.setRangeAtEndOf(pasteContent.last());\r\n    }\r\n    return this.editable.inputManager.throttledValueChanged();\r\n  };\r\n\r\n  Clipboard.prototype._cleanPasteFontSize = function(node) {\r\n    var $node, sizeMap;\r\n    $node = $(node);\r\n    if (!($node.length > 0)) {\r\n      return;\r\n    }\r\n    sizeMap = ['1.5em', '1.25em', '0.75em', '0.5em'];\r\n    return $node.find('[style*=\"font-size\"]').map(function(i, el) {\r\n      var $el;\r\n      $el = $(el);\r\n      if (langx.inArray($el.css('font-size'), sizeMap) < 0) {\r\n        return $el.css('font-size', '');\r\n      }\r\n    });\r\n  };\r\n\r\n  return contents.Clipboard = Clipboard;\r\n\r\n});\r\n\r\n"]}